/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./js/main.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./js/main.js":
/*!********************!*\
  !*** ./js/main.js ***!
  \********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _utils_ios_vh_fix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/ios-vh-fix */ "./js/utils/ios-vh-fix.js");
/* harmony import */ var _modules_form_init_custom_select__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modules/form/init-custom-select */ "./js/modules/form/init-custom-select.js");
/* harmony import */ var _modules_form_init_form_validate__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modules/form/init-form-validate */ "./js/modules/form/init-form-validate.js");
/* harmony import */ var _modules_filter_positioning__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./modules/filter-positioning */ "./js/modules/filter-positioning.js");
/* harmony import */ var _modules_tabs_init_tabs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./modules/tabs/init-tabs */ "./js/modules/tabs/init-tabs.js");
/* harmony import */ var _modules_range__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./modules/range */ "./js/modules/range.js");
/* harmony import */ var _modules_active_icons__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./modules/active-icons */ "./js/modules/active-icons.js");
/* harmony import */ var _modules_navigation_main_nav__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./modules/navigation/main-nav */ "./js/modules/navigation/main-nav.js");
/* harmony import */ var _modules_calc_rent__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./modules/calc-rent */ "./js/modules/calc-rent.js");
/* harmony import */ var _modules_sticky__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./modules/sticky */ "./js/modules/sticky.js");
/* harmony import */ var _modules_navigation_mobile_menu__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./modules/navigation/mobile-menu */ "./js/modules/navigation/mobile-menu.js");
/* harmony import */ var _modules_filter_bar__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./modules/filter-bar */ "./js/modules/filter-bar.js");
/* harmony import */ var _modules_scroll_sequence__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./modules/scroll-sequence */ "./js/modules/scroll-sequence.js");
/* harmony import */ var _modules_init_accordion__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./modules/init-accordion */ "./js/modules/init-accordion.js");
/* harmony import */ var _modules_slider_promo_slider__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./modules/slider/promo-slider */ "./js/modules/slider/promo-slider.js");
/* harmony import */ var _modules_catalog_filter__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./modules/catalog-filter */ "./js/modules/catalog-filter.js");
/* harmony import */ var _modules_slider_geography_slider__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./modules/slider/geography-slider */ "./js/modules/slider/geography-slider.js");
/* harmony import */ var _modules_slider_product_slider__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./modules/slider/product-slider */ "./js/modules/slider/product-slider.js");
/* harmony import */ var _modules_slider_gallery_slider__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./modules/slider/gallery-slider */ "./js/modules/slider/gallery-slider.js");













 // sliders





 // ---------------------------------

window.addEventListener('DOMContentLoaded', function () {
  // Utils
  // ---------------------------------
  Object(_utils_ios_vh_fix__WEBPACK_IMPORTED_MODULE_0__["iosVhFix"])(); // Modules
  // ---------------------------------
  // sliders

  Object(_modules_slider_promo_slider__WEBPACK_IMPORTED_MODULE_14__["initPromoSlider"])();
  Object(_modules_slider_geography_slider__WEBPACK_IMPORTED_MODULE_16__["initGeographySlider"])();
  Object(_modules_slider_gallery_slider__WEBPACK_IMPORTED_MODULE_18__["initGallerySliders"])();
  Object(_modules_slider_product_slider__WEBPACK_IMPORTED_MODULE_17__["initProductSlider"])(); // -

  Object(_modules_tabs_init_tabs__WEBPACK_IMPORTED_MODULE_4__["initTabs"])();
  Object(_modules_navigation_main_nav__WEBPACK_IMPORTED_MODULE_7__["initNavToggle"])();
  Object(_modules_navigation_mobile_menu__WEBPACK_IMPORTED_MODULE_10__["initMobileMenu"])();
  Object(_modules_init_accordion__WEBPACK_IMPORTED_MODULE_13__["initAccordions"])(); // все скрипты должны быть в обработчике 'DOMContentLoaded', но не все в 'load'
  // в load следует добавить скрипты, не участвующие в работе первого экрана

  window.addEventListener('load', function () {
    Object(_modules_form_init_custom_select__WEBPACK_IMPORTED_MODULE_1__["initCustomSelect"])();
    Object(_modules_form_init_form_validate__WEBPACK_IMPORTED_MODULE_2__["initFormValidate"])();
    Object(_modules_filter_positioning__WEBPACK_IMPORTED_MODULE_3__["filterPositioning"])();
    Object(_modules_catalog_filter__WEBPACK_IMPORTED_MODULE_15__["initCatalogFilter"])();
    Object(_modules_range__WEBPACK_IMPORTED_MODULE_5__["initRange"])();
    Object(_modules_active_icons__WEBPACK_IMPORTED_MODULE_6__["initActiveIcons"])();
    Object(_modules_calc_rent__WEBPACK_IMPORTED_MODULE_8__["initCalcRent"])();
    Object(_modules_sticky__WEBPACK_IMPORTED_MODULE_9__["initSticky"])();
    Object(_modules_filter_bar__WEBPACK_IMPORTED_MODULE_11__["initFilterBar"])();
    Object(_modules_scroll_sequence__WEBPACK_IMPORTED_MODULE_12__["initScrollSequence"])();
  });
}); // ---------------------------------
// ❗❗❗ обязательно установите плагины eslint, stylelint, editorconfig в редактор кода.
// привязывайте js не на классы, а на дата атрибуты (data-validate)
// вместо модификаторов .block--active используем утилитарные классы
// .is-active || .is-open || .is-invalid и прочие (обязателен нейминг в два слова)
// .select.select--opened ❌ ---> [data-select].is-open ✅
// выносим все в дата атрибуты
// url до иконок пинов карты, настройки автопрокрутки слайдера, url к json и т.д.
// для адаптивного JS используейтся matchMedia и addListener
// const breakpoint = window.matchMedia(`(min-width:1024px)`);
// const breakpointChecker = () => {
//   if (breakpoint.matches) {
//   } else {
//   }
// };
// breakpoint.addListener(breakpointChecker);
// breakpointChecker();
// используйте .closest(el)

/***/ }),

/***/ "./js/modules/accordions.js":
/*!**********************************!*\
  !*** ./js/modules/accordions.js ***!
  \**********************************/
/*! exports provided: Accordions */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Accordions", function() { return Accordions; });
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var Accordions = /*#__PURE__*/function () {
  function Accordions() {
    _classCallCheck(this, Accordions);

    this._openHeight = 0;
    this._windowWidth = window.innerWidth;
    this._documentClickHandler = this._documentClickHandler.bind(this);
    this._windowResizeHandler = this._windowResizeHandler.bind(this);

    this._init();
  }

  _createClass(Accordions, [{
    key: "_init",
    value: function _init() {
      this.fullUpdate();
      document.addEventListener('click', this._documentClickHandler);
      window.addEventListener('resize', this._windowResizeHandler);
    }
  }, {
    key: "_documentClickHandler",
    value: function _documentClickHandler(evt) {
      var target = evt.target;

      if (!target.closest('[data-accordion="button"]')) {
        return;
      }

      evt.preventDefault();
      var parent = target.closest('[data-accordion="parent"]');

      if (parent.dataset.destroy && !window.matchMedia(parent.dataset.destroy).matches) {
        return;
      }

      var element = target.closest('[data-accordion="element"]');

      if (element.classList.contains('is-active')) {
        this.closeAccordion(element);
        return;
      }

      this.openAccordion(element);
    }
  }, {
    key: "_windowResizeHandler",
    value: function _windowResizeHandler() {
      if (this._windowWidth === window.innerWidth) {
        return;
      }

      this._windowWidth = window.innerWidth;
      this.updateAccordionsHeight();
    }
  }, {
    key: "closeAllAccordion",
    value: function closeAllAccordion(parent) {
      var _this = this;

      var elements = parent.querySelectorAll('[data-accordion="element"]');
      elements.forEach(function (element) {
        var currentParent = element.closest('[data-accordion="parent"]');

        if (currentParent === parent) {
          _this.closeAccordion(element);
        }
      });
    }
  }, {
    key: "updateAccordionsHeight",
    value: function updateAccordionsHeight() {
      var element = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

      if (element) {
        var content = element.querySelector('[data-accordion="content"]');
        content.style.transition = 'none';
        content.style.maxHeight = "".concat(content.scrollHeight, "px");
        setTimeout(function () {
          content.style.transition = null;
        });
        return;
      }

      var closeElements = document.querySelectorAll('[data-accordion="element"]:not(.is-active)');
      closeElements.forEach(function (closeElement) {
        var parent = closeElement.closest('[data-accordion="parent"]');
        var content = closeElement.querySelector('[data-accordion="content"]');

        if (parent.dataset.destroy && !window.matchMedia(parent.dataset.destroy).matches) {
          content.style.maxHeight = '100%';
          return;
        }

        content.style.maxHeight = null;
      });
      var openElements = document.querySelectorAll('[data-accordion="element"].is-active');
      openElements.forEach(function (openElement) {
        var content = openElement.querySelector('[data-accordion="content"]');
        var parent = openElement.closest('[data-accordion="parent"]');

        if (parent.dataset.destroy && !window.matchMedia(parent.dataset.destroy).matches) {
          content.style.maxHeight = '100%';
          return;
        }

        content.style.transition = 'none';
        content.style.maxHeight = "".concat(content.scrollHeight, "px");
        setTimeout(function () {
          content.style.transition = null;
        });
      });
    }
  }, {
    key: "fullUpdate",
    value: function fullUpdate() {
      var _this2 = this;

      var parent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var transition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var openElements;

      if (parent) {
        openElements = parent.querySelectorAll('[data-accordion="element"].is-active');
      } else {
        openElements = document.querySelectorAll('[data-accordion="element"].is-active');
      }

      openElements.forEach(function (openElement) {
        var innerParent = openElement.querySelector('[data-accordion="parent"]');

        if (innerParent) {
          return;
        }

        _this2.openAccordion(openElement, transition);
      });
      this.updateAccordionsHeight();
    }
  }, {
    key: "openAccordion",
    value: function openAccordion(element) {
      var transition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var parentElement = element.closest('[data-accordion="parent"]');
      var contentElement = element.querySelector('[data-accordion="content"]');
      this._openHeight += contentElement.scrollHeight;

      if (parentElement.hasAttribute('data-single')) {
        this.closeAllAccordion(parentElement);
      }

      element.classList.add('is-active');

      if (transition) {
        contentElement.style.maxHeight = "".concat(this._openHeight, "px");
      } else {
        contentElement.style.transition = 'none';
        contentElement.style.maxHeight = "".concat(this._openHeight, "px");
        setTimeout(function () {
          contentElement.style.transition = null;
        });
      }

      if (parentElement.closest('[data-accordion="element"]')) {
        this.openAccordion(parentElement.closest('[data-accordion="element"]'), transition);
        return;
      }

      this._openHeight = 0;
    }
  }, {
    key: "closeAccordion",
    value: function closeAccordion(element) {
      var transition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var contentElement = element.querySelector('[data-accordion="content"]');

      if (!contentElement) {
        return;
      }

      element.classList.remove('is-active');

      if (transition) {
        contentElement.style.maxHeight = '0';
      } else {
        contentElement.style.transition = 'none';
        contentElement.style.maxHeight = '0';
        setTimeout(function () {
          contentElement.style.transition = null;
        });
      }
    }
  }]);

  return Accordions;
}();

/***/ }),

/***/ "./js/modules/active-icons.js":
/*!************************************!*\
  !*** ./js/modules/active-icons.js ***!
  \************************************/
/*! exports provided: initActiveIcons */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initActiveIcons", function() { return initActiveIcons; });
var initActiveIcons = function initActiveIcons() {
  var filters = document.querySelector('.form-filters');

  if (!filters) {
    return;
  }

  if (filters) {
    var itemBrandsList = filters.querySelectorAll('.brands-list .brands-item input');
    var itemBrandsSublist = filters.querySelectorAll('.brands-sublist .brands-item input');
    var itemCheckbox = filters.querySelectorAll('.checkbox-item input');
    var itemActive = filters.querySelectorAll('.active-icon');
    var rangeList = filters.querySelectorAll('.js-range');
    var activeTitle = filters.querySelectorAll('.active-icon__title--range');
    var brandsItem = filters.querySelectorAll('.brands-list .brands-item');
    rangeList.forEach(function (range) {
      var rangeSlider = range.querySelector('.js-range-slider');
      var inputMin = range.querySelector('.js-range-input-min input');
      var inputMax = range.querySelector('.js-range-input-max input');

      var includesIcon = function includesIcon(item1, item2) {
        activeTitle.forEach(function (element) {
          var parent = element.parentNode;

          if (range.id === parent.dataset.parent) {
            element.innerHTML = "".concat(item1, " &#8212 ").concat(item2);
            parent.classList.add('active-icon--active'); // if (breakpoint.matches) {
            //   filterItems.forEach((filter) => {
            //     if (parent.dataset.parent === filter.dataset.parent) {
            //       filter.classList.add('form-filters__item--active');
            //     }
            //   });
            // }
          }
        });
      };

      rangeSlider.noUiSlider.on('change', function (handle) {
        includesIcon(handle[0], handle[1]);
      });
      inputMin.addEventListener('change', function () {
        includesIcon(inputMin.value, inputMax.value);
      });
      inputMax.addEventListener('change', function () {
        includesIcon(inputMin.value, inputMax.value);
      });
    });

    var displaysIcons = function displaysIcons(items, elements, items2, items3) {
      items.forEach(function (item) {
        item.addEventListener('input', function () {
          if (items2) {
            items2.forEach(function (e) {
              if (item.checked && item.value === e.value) {
                e.checked = true;
              }
            });
          }

          if (items3) {
            items3.forEach(function (e) {
              if (item.checked && item.value === e.dataset.parent) {
                e.classList.add('brands-item--active');
              } else if (!item.checked && item.value === e.dataset.parent) {
                e.classList.remove('brands-item--active');
              }
            });
          }

          elements.forEach(function (element) {
            if (item.checked && item.value === element.dataset.parent) {
              element.classList.add('active-icon--active');
            } else if (!item.checked && item.value === element.dataset.parent) {
              element.classList.remove('active-icon--active');
            }
          });
        });
      });
    };

    var removesCheckboxes = function removesCheckboxes(items1, items2) {
      items1.forEach(function (i) {
        items2.forEach(function (e) {
          e.addEventListener('input', function () {
            if (!e.checked && e.value === i.value) {
              i.checked = false;
            }
          });
        });
      });
    };

    var removesIcons = function removesIcons(elements, items, items2) {
      elements.forEach(function (element) {
        element.addEventListener('click', function () {
          items.forEach(function (item) {
            if (item.value === element.dataset.parent || item.id === element.dataset.parent) {
              item.checked = false;
              element.classList.remove('active-icon--active');
            }
          });

          if (items2) {
            items2.forEach(function (e) {
              if (e.dataset.parent === element.dataset.parent) {
                e.classList.remove('brands-item--active');
              }
            });
          }
        });
      });
    };

    displaysIcons(itemBrandsList, itemActive, itemBrandsSublist, brandsItem);
    displaysIcons(itemBrandsSublist, itemActive, itemBrandsList, brandsItem);
    removesCheckboxes(itemBrandsSublist, itemBrandsList);
    removesCheckboxes(itemBrandsList, itemBrandsSublist);
    displaysIcons(itemCheckbox, itemActive);
    removesIcons(itemActive, itemBrandsList, brandsItem);
    removesIcons(itemActive, itemBrandsSublist);
    removesIcons(itemActive, itemCheckbox);
    removesIcons(itemActive, rangeList);
  }
};



/***/ }),

/***/ "./js/modules/calc-rent.js":
/*!*********************************!*\
  !*** ./js/modules/calc-rent.js ***!
  \*********************************/
/*! exports provided: initCalcRent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initCalcRent", function() { return initCalcRent; });
var initCalcRent = function initCalcRent() {
  var requestBlock = document.querySelectorAll('.request-block');
  var buttonReservation = document.querySelectorAll('.btn-reservation');

  if (!buttonReservation) {
    return;
  }

  if (buttonReservation) {
    buttonReservation.forEach(function (item) {
      item.addEventListener('click', function () {
        if (item.classList.contains('btn-reservation--active')) {
          item.classList.remove('btn-reservation--active');
          item.innerHTML = 'Арендовать';
        } else {
          item.classList.add('btn-reservation--active');
          item.innerHTML = 'Оформить заявку';
        }
      });
    });
  }

  if (!requestBlock) {
    return;
  }

  if (requestBlock) {
    requestBlock.forEach(function (element) {
      var inputRequest = element.querySelector('input[name="request"]');
      var inputFormula = element.querySelector('input[name="formula"]');
      var requestButton = element.querySelectorAll('.request-block__button');

      var calculatesСost = function calculatesСost() {
        if (inputRequest.value >= 3 && inputRequest.value <= 10) {
          inputFormula.value = "1 500 \xD7 ".concat(inputRequest.value, " = ").concat(1500 * inputRequest.value, " \u0440\u0443\u0431.");
        }

        if (inputRequest.value >= 11 && inputRequest.value <= 20) {
          inputFormula.value = "1 200 \xD7 ".concat(inputRequest.value, " = ").concat(1200 * inputRequest.value, " \u0440\u0443\u0431.");
        }

        if (inputRequest.value >= 21) {
          inputFormula.value = "1 000 \xD7 ".concat(inputRequest.value, " = ").concat(1000 * inputRequest.value, " \u0440\u0443\u0431.");
        }
      };

      calculatesСost();
      requestButton.forEach(function (item) {
        item.addEventListener('click', function () {
          if (item.classList.contains('request-block__button--minus')) {
            item.nextElementSibling.stepDown();
          } else if (item.classList.contains('request-block__button--plus')) {
            item.previousElementSibling.stepUp();
          }

          calculatesСost();
        });
      });
    });
  }
};



/***/ }),

/***/ "./js/modules/catalog-filter.js":
/*!**************************************!*\
  !*** ./js/modules/catalog-filter.js ***!
  \**************************************/
/*! exports provided: initCatalogFilter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initCatalogFilter", function() { return initCatalogFilter; });
var initCatalogFilter = function initCatalogFilter() {
  var body = document.querySelector('.page-body');
  var filters = body.querySelectorAll('.filters-item__btn');
  var minWidthDesktop = window.matchMedia('(min-width: 768px)');
  var maxWidthMobile = window.matchMedia('(max-width: 767px)');

  if (filters.length <= 0) {
    return;
  }

  if (filters) {
    var formFilters = body.querySelector('.form-filters');
    var overlay = body.querySelector('.overlay');
    var brandsList = formFilters.querySelector('.brands-list');
    var brandsSublist = formFilters.querySelector('.brands-sublist');
    var brandsLink = brandsList.querySelectorAll('.brands-item__link');
    var brandsItem = brandsSublist.querySelectorAll('.brands-item');

    var initCardSublist = function initCardSublist() {
      brandsLink.forEach(function (i) {
        i.addEventListener('click', function (evt) {
          evt.preventDefault();
          brandsItem.forEach(function (e) {
            if (i.dataset.parent === e.dataset.parent) {
              brandsSublist.classList.add('brands-sublist--active');
              e.classList.add('brands-item--active');
            }
          });
        });
      });
    };

    var removesCardSublist = function removesCardSublist() {
      brandsItem.forEach(function (e) {
        if (e.classList.contains('brands-item--active')) {
          e.classList.remove('brands-item--active');
        }
      });
    };

    var initLinkSublist = function initLinkSublist() {
      brandsItem.forEach(function (e) {
        var itemLink = e.querySelector('.brands-item__link');
        itemLink.addEventListener('click', function (evt) {
          evt.preventDefault();

          if (e.classList.contains('brands-item--active')) {
            e.classList.remove('brands-item--active');
            brandsSublist.classList.remove('brands-sublist--active');
          }
        });
      });
    };

    filters.forEach(function (item) {
      item.addEventListener('click', function (evt) {
        evt.preventDefault();
        var parent = item.parentNode;
        var filtersList = parent.querySelector('.filters-item__list');

        var setsBrandHeight = function setsBrandHeight() {
          if (minWidthDesktop.matches) {
            brandsList.style.height = brandsList.scrollHeight + 1 + 'px';
            brandsList.style.maxHeight = window.innerHeight - formFilters.getBoundingClientRect().bottom + 'px';
          } else if (maxWidthMobile.matches) {
            brandsList.style.height = 'auto';

            if (brandsList.classList.contains('filters__item--active')) {
              brandsList.style.maxHeight = brandsList.scrollHeight + 'px';
            } else {
              brandsList.style.maxHeight = 0;
            }
          }
        };

        setsBrandHeight();
        window.addEventListener('resize', function () {
          setsBrandHeight();
        }, false);

        if (parent.classList.contains('filters__item--active')) {
          parent.classList.remove('filters__item--active');
          overlay.classList.remove('overlay--active');
          body.classList.remove('page-body--filter');
          brandsSublist.classList.remove('brands-sublist--active');

          if (maxWidthMobile.matches) {
            filtersList.style.maxHeight = null;
          }

          removesCardSublist();
        } else {
          if (minWidthDesktop.matches) {
            document.querySelectorAll('.form-filters__item').forEach(function (element) {
              element.classList.remove('filters__item--active');
              overlay.classList.remove('overlay--active');
              body.classList.remove('page-body--filter');
            });
          }

          parent.classList.add('filters__item--active');
          overlay.classList.add('overlay--active');
          body.classList.add('page-body--filter');

          if (maxWidthMobile.matches) {
            filtersList.style.maxHeight = filtersList.scrollHeight + 'px';
            setInterval(function () {
              if (brandsSublist.classList.contains('brands-sublist--active')) {
                brandsList.style.maxHeight = null;
              } else if (!brandsSublist.classList.contains('brands-sublist--active') && brandsList.classList.contains('filters__item--active')) {
                brandsList.style.maxHeight = brandsList.scrollHeight + 'px';
              }
            });
          }
        }

        initCardSublist();
        initLinkSublist();
        overlay.addEventListener('click', function (e) {
          if (parent.classList.contains('filters__item--active')) {
            e.preventDefault();
            parent.classList.remove('filters__item--active');
            overlay.classList.remove('overlay--active');
            body.classList.remove('page-body--filter');
            brandsSublist.classList.remove('brands-sublist--active');
            removesCardSublist();
          }
        });
      });
    });
  }
};



/***/ }),

/***/ "./js/modules/filter-bar.js":
/*!**********************************!*\
  !*** ./js/modules/filter-bar.js ***!
  \**********************************/
/*! exports provided: initFilterBar */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initFilterBar", function() { return initFilterBar; });
var initFilterBar = function initFilterBar() {
  var filters = document.querySelector('.filters');
  var maxWidthMobile = window.matchMedia('(max-width: 767px)');

  if (!filters) {
    return;
  }

  if (filters) {
    var filtersWrapper = document.querySelector('.filters__wrapper');
    var catalogSection = document.querySelector('.catalog-section');
    var filtersItem = document.querySelectorAll('[data-filter]');
    var formFiltersItem = document.querySelectorAll('.form-filters__item');
    var brandsItem = document.querySelectorAll('.filters-item__list .brands-item');
    var buttonFilters = filters.querySelector('.filters__btn');
    var buttonItem = filters.querySelectorAll('.filters-item__btn');
    var heightItems = 0;
    var heightBrands = 0;
    var heightButtons = 0;
    filtersItem.forEach(function (i) {
      heightItems = heightItems + i.offsetHeight;
    });
    brandsItem.forEach(function (i) {
      heightBrands = heightBrands + i.offsetHeight;
    });
    buttonItem.forEach(function (i) {
      heightButtons = heightButtons + i.offsetHeight;
    });
    var heightFilters = heightItems + heightBrands + heightButtons;
    var heightWrapper;

    if (catalogSection) {
      heightWrapper = catalogSection.offsetHeight + heightFilters + 100;
    } else {
      heightWrapper = heightFilters + 100;
    }

    if (buttonFilters) {
      buttonFilters.addEventListener('click', function () {
        if (buttonFilters.classList.contains('filters__btn--active')) {
          buttonFilters.classList.remove('filters__btn--active');

          if (maxWidthMobile.matches) {
            filtersWrapper.style.maxHeight = null;
            formFiltersItem.forEach(function (item) {
              var filtersList = item.querySelector('.filters-item__list');
              var filtersSublist = item.querySelector('.filters-item__sublist');
              item.classList.remove('filters__item--active');
              filtersList.style.maxHeight = null;

              if (filtersSublist) {
                filtersSublist.classList.remove('brands-sublist--active');
              }
            });
          }
        } else if (!buttonFilters.classList.contains('filters__btn--active')) {
          buttonFilters.classList.add('filters__btn--active');

          if (maxWidthMobile.matches) {
            filtersWrapper.style.maxHeight = heightWrapper + 'px';
          }
        }
      });
    }
  }
};



/***/ }),

/***/ "./js/modules/filter-positioning.js":
/*!******************************************!*\
  !*** ./js/modules/filter-positioning.js ***!
  \******************************************/
/*! exports provided: filterPositioning */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "filterPositioning", function() { return filterPositioning; });
var filterPositioning = function filterPositioning() {
  var formFilters = document.querySelector('.form-filters__list');
  var minWidthDesktop = window.matchMedia('(min-width: 768px)');

  if (!formFilters) {
    return;
  }

  if (formFilters) {
    var filtersItem = formFilters.querySelectorAll('.filters-item');

    var positionsFilters = function positionsFilters() {
      filtersItem.forEach(function (item) {
        var filtersList = item.querySelector('.filters-item__list');

        if (minWidthDesktop.matches) {
          var distanceBetween = formFilters.getBoundingClientRect().right - Math.round(item.getBoundingClientRect().left);
          var leftIndentItem = item.offsetLeft;
          var widthFiltersList = filtersList.offsetWidth;
          filtersList.style.left = leftIndentItem + 'px';

          if (distanceBetween <= widthFiltersList) {
            filtersList.style.left = 'auto';
            filtersList.style.right = 0;
          } else if (distanceBetween > widthFiltersList) {
            filtersList.style.right = 'auto';
            filtersList.style.left = leftIndentItem + 'px';
          }
        } else {
          filtersList.style.left = 'auto';
          filtersList.style.right = 'auto';
        }
      });
    };

    if (minWidthDesktop.matches) {
      setInterval(positionsFilters);
    }

    window.addEventListener('resize', function () {
      setInterval(positionsFilters);
    }, false);
  }
};



/***/ }),

/***/ "./js/modules/form/custom-select.js":
/*!******************************************!*\
  !*** ./js/modules/form/custom-select.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return CustomSelect; });
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

// Функции создания разметки и рендера нативного селекта
var createElement = function createElement(template) {
  var newElement = document.createElement('div');
  newElement.innerHTML = template;
  return newElement.firstChild;
};

var renderElement = function renderElement(container, component) {
  var place = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'beforeend';

  switch (place) {
    case 'prepend':
      container.prepend(component);
      break;

    case 'afterend':
      container.after(component);
      break;

    case 'beforeend':
      container.append(component);
      break;
  }
};

var createNativeOptionsMarkup = function createNativeOptionsMarkup(items, activeIndex) {
  return items.map(function (el, index) {
    if (activeIndex.length) {
      var currentIndex = activeIndex.find(function (item) {
        return item === index;
      });

      if (currentIndex === index) {
        return "<option ".concat(el.value ? "value=".concat(el.value) : '', " selected>").concat(el.text ? "".concat(el.text) : '', "</option>");
      } else {
        return "<option ".concat(el.value ? "value=".concat(el.value) : '', ">").concat(el.text ? "".concat(el.text) : '', "</option>");
      }
    } else {
      return "<option ".concat(el.value ? "value=".concat(el.value) : '', ">").concat(el.text ? "".concat(el.text) : '', "</option>");
    }
  }).join('\n');
};

var createNativeSelectMarkup = function createNativeSelectMarkup(_ref) {
  var id = _ref.id,
      items = _ref.items,
      multiple = _ref.multiple,
      name = _ref.name,
      required = _ref.required,
      _ref$activeIndex = _ref.activeIndex,
      activeIndex = _ref$activeIndex === void 0 ? [] : _ref$activeIndex;
  return "<select ".concat(id ? "id='".concat(id, "'") : '', " ").concat(name ? "name='".concat(name, "'") : '', " ").concat(multiple ? 'multiple' : '', " ").concat(required ? 'required' : '', " tabindex=\"-1\" aria-hidden=\"true\">\n            <option value=\"\"></option>\n            ").concat(createNativeOptionsMarkup(items, activeIndex), "\n          </select>");
}; // Функция расстановки активных состояний у li по умолчанию


var setActiveState = function setActiveState(multiple, selectItems) {
  var flag = true;
  var activeIndex = [];
  selectItems.forEach(function (item, index) {
    if (multiple) {
      if (item.getAttribute('aria-selected') === 'true') {
        activeIndex.push(index);
      }
    } else {
      if (item.getAttribute('aria-selected') === 'true' && flag) {
        activeIndex.push(index);
        flag = false;
      } else {
        item.setAttribute('aria-selected', 'false');
      }
    }
  });
  return activeIndex;
}; // Формирование строки для мультиселекта


var createMultiString = function createMultiString(arr) {
  var str = '';

  if (arr.length) {
    if (arr.length === 1) {
      str = arr[0].innerHTML;
    } else {
      arr.forEach(function (el, index) {
        if (index === arr.length - 1) {
          str += el.innerHTML;
        } else {
          str += "".concat(el.innerHTML, ", ");
        }
      });
    }
  }

  return str;
}; // Функция расстановки активных состояний у li по умолчанию


var setSelectActiveState = function setSelectActiveState(multiple, insert, item) {
  var buttonTextBlock = item.querySelector('.custom-select__text');
  var activeItems = item.querySelectorAll('.custom-select__item[aria-selected="true"]');
  var label = item.querySelector('.custom-select__label');
  var str = createMultiString(activeItems);
  buttonTextBlock.style.transition = '0s';

  if (label) {
    label.style.transition = '0s';
  }

  setTimeout(function () {
    if (label) {
      label.style.transition = null;
    }

    buttonTextBlock.style.transition = null;
  }, 300);

  if (multiple && insert) {
    item.classList.add('not-empty');
    buttonTextBlock.innerHTML = str;
  } else if (multiple) {
    return;
  } else {
    item.classList.add('not-empty');
    buttonTextBlock.innerHTML = activeItems[0].innerHTML;
  }
}; // Функция создания структуры селекта, после создания селекта она сразу его рендерит


var createSelectStructure = function createSelectStructure(item) {
  var options = {};
  options.items = [];
  var multiple = item.dataset.multiple;
  var id = item.dataset.id;
  var name = item.dataset.name;
  var required = item.dataset.required;
  var insert = item.dataset.insert;
  var selectItems = item.querySelectorAll('.custom-select__item');
  var activeIndex = setActiveState(multiple, selectItems);

  if (activeIndex.length) {
    options.activeIndex = activeIndex;
    setSelectActiveState(multiple, insert, item);
  }

  options.name = name || false;
  options.id = id || false;
  options.required = Boolean(required);
  options.multiple = Boolean(multiple);
  selectItems.forEach(function (selectItem) {
    var value = selectItem.dataset.selectValue;
    var itemInfo = {};
    itemInfo.text = selectItem.innerText;
    itemInfo.value = value;
    options.items.push(itemInfo);
  });
  renderElement(item, createElement(createNativeSelectMarkup(options)));
  return item;
}; // Закрытие селекта


var closeSelect = function closeSelect() {
  var activeSelect = document.querySelector('[data-select].is-open');
  document.removeEventListener('click', onDocumentClick);
  document.removeEventListener('keydown', onEscapePress);

  if (activeSelect) {
    activeSelect.classList.remove('is-open');
  }
}; // Действия при клике на элемент списка


var clickAction = function clickAction(el, index) {
  var parent = el.closest('.custom-select');
  var multiple = parent.dataset.multiple;
  var insert = parent.dataset.insert;
  var buttonTextBlock = parent.querySelector('.custom-select__text');
  var itemText = el.innerText;
  var options = parent.querySelectorAll('option');
  var select = parent.querySelector('select');
  var changeEv = new CustomEvent('change');
  var inputEv = new CustomEvent('input');
  select.dispatchEvent(changeEv);
  select.dispatchEvent(inputEv);
  var form = select.closest('form');

  if (form) {
    var formChangeEv = new CustomEvent('change');
    var formInputEv = new CustomEvent('input');
    form.dispatchEvent(formChangeEv);
    form.dispatchEvent(formInputEv);
  }

  if (multiple) {
    if (insert === 'true') {
      if (el.getAttribute('aria-selected') === 'true') {
        el.setAttribute('aria-selected', 'false');
        var activeItems = parent.querySelectorAll('.custom-select__item[aria-selected="true"]');
        var str = createMultiString(activeItems);
        options[index + 1].selected = false;
        buttonTextBlock.innerText = str;

        if (!str) {
          parent.classList.remove('not-empty');
          parent.classList.remove('is-valid');
        }
      } else {
        el.setAttribute('aria-selected', 'true');

        var _activeItems = parent.querySelectorAll('.custom-select__item[aria-selected="true"]');

        var _str = createMultiString(_activeItems);

        buttonTextBlock.innerText = _str;
        parent.classList.add('not-empty');
        parent.classList.add('is-valid');
        options[index + 1].selected = true;
      }
    } else {
      if (el.getAttribute('aria-selected') === 'true') {
        el.setAttribute('aria-selected', 'false');
        options[index + 1].selected = false;
      } else {
        el.setAttribute('aria-selected', 'true');
        options[index + 1].selected = true;
      }
    }
  } else {
    var activeItem = parent.querySelector('.custom-select__item[aria-selected="true"]');

    if (el.getAttribute('aria-selected') === 'true') {
      closeSelect();
    } else {
      if (activeItem) {
        activeItem.setAttribute('aria-selected', 'false');
        parent.classList.remove('not-empty');
        parent.classList.remove('is-valid');
      }

      buttonTextBlock.innerText = itemText;
      el.setAttribute('aria-selected', 'true');
      parent.classList.add('not-empty');
      parent.classList.add('is-valid');
      options[index + 1].selected = true;
      closeSelect();
    }
  }
}; // Обработчики событий


var onDocumentClick = function onDocumentClick(_ref2) {
  var target = _ref2.target;

  if (!target.closest('.custom-select')) {
    closeSelect();
  }
};

var onEscapePress = function onEscapePress(e) {
  var isEscape = e.key === 'Escape';

  if (isEscape) {
    closeSelect();
  }
};

var onItemClick = function onItemClick(el, index) {
  clickAction(el, index);
};

var onItemKeydown = function onItemKeydown(e, el, index) {
  var isEnter = e.key === 'Enter';

  if (isEnter) {
    clickAction(el, index);
  }
};

var onLastItemKeydown = function onLastItemKeydown(e) {
  var isTab = e.key === 'Tab';

  if (isTab) {
    closeSelect();
  }
};

var onSelectClick = function onSelectClick(e) {
  var parent = e.target.closest('[data-select]');
  var activeSelect = document.querySelector('[data-select].is-open');
  parent.classList.remove('is-invalid');

  if (activeSelect && activeSelect === parent) {
    activeSelect.classList.remove('is-open');
    return;
  }

  if (activeSelect) {
    closeSelect();
  }

  document.addEventListener('click', onDocumentClick);
  document.addEventListener('keydown', onEscapePress);

  if (parent.classList.contains('is-open')) {
    parent.classList.remove('is-open');
  } else {
    parent.classList.add('is-open');
  }
};

var onSelectKeydown = function onSelectKeydown(e) {
  var parent = e.target.closest('[data-select]');
  parent.classList.remove('is-invalid');

  if (e.shiftKey && e.key === 'Tab' && parent.closest('.is-open')) {
    closeSelect();
  }
}; // Все действия с селектом


var setSelectAction = function setSelectAction(item) {
  var customSelect = item;
  var button = customSelect.querySelector('.custom-select__button');
  var selectItems = customSelect.querySelectorAll('.custom-select__item');
  button.addEventListener('click', onSelectClick);
  button.addEventListener('keydown', onSelectKeydown);
  selectItems.forEach(function (el, index) {
    el.addEventListener('click', function () {
      onItemClick(el, index);
    });
    el.addEventListener('keydown', function (e) {
      onItemKeydown(e, el, index);
    });

    if (index === selectItems.length - 1) {
      el.addEventListener('keydown', onLastItemKeydown);
    }
  });
}; // Класс CustomSelect


var CustomSelect = /*#__PURE__*/function () {
  function CustomSelect() {
    _classCallCheck(this, CustomSelect);

    window.selectInit = this.init.bind(this);
  }

  _createClass(CustomSelect, [{
    key: "setAction",
    value: function setAction(item) {
      setSelectAction(item);
    }
  }, {
    key: "createSelect",
    value: function createSelect(item) {
      createSelectStructure(item);
      return item;
    }
  }, {
    key: "init",
    value: function init() {
      var _this = this;

      var selects = document.querySelectorAll('[data-select]');
      selects.forEach(function (select) {
        if (!select.classList.contains('is-initialized')) {
          var newSelect = _this.createSelect(select);

          _this.setAction(newSelect);

          select.classList.add('is-initialized');
        }
      });
    }
  }]);

  return CustomSelect;
}();



/***/ }),

/***/ "./js/modules/form/form-validate.js":
/*!******************************************!*\
  !*** ./js/modules/form/form-validate.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return FormsValidate; });
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

// Константы и переменные
var BASE_COUNTRY_CODE = '+7';
var BASE_MATRIX = '(___) ___ __ __';
var phoneLength = BASE_COUNTRY_CODE.length + BASE_MATRIX.length; // Ограничения ввода для обычных полей

var returnLimitationsRegEx = function returnLimitationsRegEx(dataLimitations) {
  switch (dataLimitations) {
    case 'digit':
      return /[^\d]/g;

    case 'name':
      return /[^a-zA-Zа-яёА-ЯЁ\-\s]/g;

    case 'letters':
      return /[^a-zA-Zа-яёА-ЯЁ\s]/g;

    case 'letters-and-digit':
      return /[^a-zA-Zа-яёА-ЯЁ\s\d]/g;

    case 'cyrillic':
      return /[^а-яёА-ЯЁ\s]/g;

    case 'latin':
      return /[^a-zA-Z\s]/g;

    default:
      return false;
  }
};

var simpleLimitations = function simpleLimitations(formElement, dataLimitations) {
  var RegEx = returnLimitationsRegEx(dataLimitations);

  if (RegEx) {
    formElement.addEventListener('input', function () {
      formElement.value = formElement.value.replace(RegEx, '');
    });
    return;
  } // eslint-disable-next-line no-console


  console.error("\u041F\u0435\u0440\u0435\u0434\u0430\u043D\u043D\u044B\u0439 \u0444\u043E\u0440\u043C\u0430\u0442 \u043E\u0433\u0440\u0430\u043D\u0438\u0447\u0435\u043D\u0438\u044F: ".concat(dataLimitations, ", \u043D\u0435 \u043F\u043E\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442\u0441\u044F. \u041F\u0440\u043E\u0432\u0435\u0440\u044C\u0442\u0435 \u043A\u043E\u0440\u0440\u0435\u043A\u0442\u043D\u043E\u0441\u0442\u044C \u0432\u0432\u0435\u0434\u0451\u043D\u043D\u044B\u0445 \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0439 \u0432 \u0441\u043E\u043E\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441\u043E \u0441\u043F\u0435\u0446\u0438\u0444\u0438\u043A\u0430\u0446\u0438\u0435\u0439."));
}; // Ограничения ввода для обычных полей с матрицей


var returnMatrixLimitationsRegEx = function returnMatrixLimitationsRegEx(dataMatrixLimitations) {
  switch (dataMatrixLimitations) {
    case 'digit':
      return /[^\d]/g;

    case 'name':
      return /[^\а-яё\А-ЯЁ\a-z\A-Z\-]]/g;

    case 'letters':
      return /[^\а-яё\А-ЯЁ\a-z\A-Z]/g;

    case 'letters-and-digit':
      return /[^\а-яё\А-ЯЁ\a-z\A-Z\d]/g;

    case 'cyrillic':
      return /[^\а-яё\А-ЯЁ]/g;

    case 'latin':
      return /[^\a-z\A-Z]/g;

    default:
      return false;
  }
};

var initMatrixReplace = function initMatrixReplace(target, matrix, RegEx) {
  var def = matrix.replace(RegEx, '');
  var val = target.value.replace(RegEx, '');
  var i = 0;

  if (def.length >= val.length) {
    val = def;
  }

  target.value = matrix.replace(/./g, function (a) {
    if (/[_\^]/.test(a) && i < val.length) {
      return val.charAt(i++);
    } else if (i >= val.length) {
      return '';
    } else {
      return a;
    }
  });
};

var simpleMatrix = function simpleMatrix(formElement, dataMatrix, dataMatrixLimitations) {
  if (dataMatrixLimitations === null) {
    // eslint-disable-next-line no-console
    console.error('При валидации по матрице обязательно указывать формат ограничений: data-matrix-limitations=""');
    return;
  }

  var RegEx = returnMatrixLimitationsRegEx(dataMatrixLimitations);

  if (RegEx) {
    formElement.addEventListener('input', function () {
      initMatrixReplace(formElement, dataMatrix, RegEx);
    });
  } else {
    // eslint-disable-next-line no-console
    console.error("\u041F\u0435\u0440\u0435\u0434\u0430\u043D\u043D\u044B\u0439 \u0444\u043E\u0440\u043C\u0430\u0442 \u043E\u0433\u0440\u0430\u043D\u0438\u0447\u0435\u043D\u0438\u044F: ".concat(dataMatrixLimitations, ", \u043D\u0435 \u043F\u043E\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442\u0441\u044F. \u041F\u0440\u043E\u0432\u0435\u0440\u044C\u0442\u0435 \u043A\u043E\u0440\u0440\u0435\u043A\u0442\u043D\u043E\u0441\u0442\u044C \u0432\u0432\u0435\u0434\u0451\u043D\u043D\u044B\u0445 \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0439 \u0432 \u0441\u043E\u043E\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441\u043E \u0441\u043F\u0435\u0446\u0438\u0444\u0438\u043A\u0430\u0446\u0438\u0435\u0439."));
  }
}; // Маска для телефона


var onInputPhoneInput = function onInputPhoneInput(_ref) {
  var target = _ref.target;
  var matrix = "".concat(BASE_COUNTRY_CODE).concat(BASE_MATRIX);
  var def = matrix.replace(/\D/g, '');
  var i = 0;
  var val = target.value.replace(/\D/g, '');

  if (def.length >= val.length) {
    val = def;
  }

  target.value = matrix.replace(/./g, function (a) {
    if (/[_\d]/.test(a) && i < val.length) {
      return val.charAt(i++);
    } else if (i >= val.length) {
      return '';
    } else {
      return a;
    }
  });
};

var prettifyPhoneInput = function prettifyPhoneInput(input) {
  if (!input.value.startsWith(BASE_COUNTRY_CODE)) {
    if (input.value.startsWith('8')) {
      input.value = input.value.replace('8', BASE_COUNTRY_CODE);
    } else {
      input.value = "".concat(BASE_COUNTRY_CODE).concat(input.value);
    }
  } // onInputPhoneInput({input});


  var matrix = "".concat(BASE_COUNTRY_CODE).concat(BASE_MATRIX);
  var def = matrix.replace(/\D/g, '');
  var i = 0;
  var val = input.value.replace(/\D/g, '');

  if (def.length >= val.length) {
    val = def;
  }

  input.value = matrix.replace(/./g, function (a) {
    if (/[_\d]/.test(a) && i < val.length) {
      return val.charAt(i++);
    } else if (i >= val.length) {
      return '';
    } else {
      return a;
    }
  });
};

var onFocusPhoneInput = function onFocusPhoneInput(_ref2) {
  var target = _ref2.target;

  if (!target.value) {
    target.value = BASE_COUNTRY_CODE;
  }

  target.addEventListener('input', onInputPhoneInput);
  target.addEventListener('blur', onBlurPhoneInput);
  target.addEventListener('keydown', onKeydownPhoneInput);
};

var onKeydownPhoneInput = function onKeydownPhoneInput(e) {
  if (e.target.selectionStart === 1 && e.keyCode === 8 || e.keyCode === 46) {
    e.preventDefault();
  }

  if (e.target.selectionStart <= phoneLength && e.keyCode !== 8 && e.keyCode !== 46 && e.keyCode !== 37 && e.keyCode !== 39) {
    e.target.setSelectionRange(phoneLength, phoneLength);
  }
};

var onBlurPhoneInput = function onBlurPhoneInput(_ref3) {
  var target = _ref3.target;

  if (target.value === BASE_COUNTRY_CODE) {
    var parent = target.closest('[data-validate-type="phone"]');
    target.value = '';
    parent.classList.remove('not-empty');
    target.removeEventListener('input', onInputPhoneInput);
    target.removeEventListener('blur', onBlurPhoneInput);
  }
}; // Показ ошибок полей форм


var hideError = function hideError(el) {
  if (el.classList.contains('toggle-group')) {
    validateToggleGroup(el);
    el.setAttribute('aria-invalid', 'true');
    el.classList.remove('is-invalid');
    el.classList.add('is-valid');
  } else {
    var parent = el.closest('[data-validate-type]');
    el.setAttribute('aria-invalid', 'false');
    parent.classList.remove('is-invalid');
    parent.classList.add('is-valid');
  }
};

var showError = function showError(el) {
  if (el.classList.contains('toggle-group')) {
    validateToggleGroup(el);
    el.setAttribute('aria-invalid', 'false');
    el.classList.add('is-invalid');
    el.classList.remove('is-valid');
  } else {
    var parent = el.closest('[data-validate-type]');
    el.setAttribute('aria-invalid', 'true');
    parent.classList.add('is-invalid');
    parent.classList.remove('is-valid');
  }
};

var showInputsError = function showInputsError(inputs) {
  var flag = true;
  var result = true;
  inputs.forEach(function (input) {
    var type = input.closest('[data-validate-type]').dataset.validateType;

    if (type === 'toggle-group') {
      return;
    }

    flag = validateInputs(type, input);

    if (!flag) {
      result = flag;
      showError(input);
    } else {
      hideError(input);
    }
  });
  return result;
};

var showGroupInputsError = function showGroupInputsError(parents) {
  var flag = true;
  var result = true;

  if (!parents.length) {
    return result;
  }

  parents.forEach(function (parent) {
    flag = validateToggleGroup(parent);

    if (!flag) {
      result = flag;
      showError(parent);
    } else {
      hideError(parent);
    }
  });
  return result;
};

var showErrors = function showErrors(inputs, parents) {
  var result = true;
  var inputsResult = showInputsError(inputs);
  var groupResult = showGroupInputsError(parents);

  if (!inputsResult || !groupResult) {
    result = false;
  }

  return result;
}; // Валидация полей форм


var validateTextInput = function validateTextInput(input) {
  var parent = input.closest('[data-validate-type]');
  var flag = true;
  var minLength = +input.getAttribute('minlength');

  if (!minLength) {
    minLength = 1;
  }

  if (input.value.length >= minLength) {
    parent.classList.add('is-valid');
    parent.classList.remove('is-invalid');
    input.setAttribute('aria-invalid', 'false');
  } else {
    parent.classList.remove('is-valid');
    input.setAttribute('aria-invalid', 'true');
    flag = false;
  }

  return flag;
};

var validatePhoneInput = function validatePhoneInput(input) {
  var parent = input.closest('[data-validate-type]');
  var flag = true;

  if (input.value.length >= phoneLength) {
    parent.classList.remove('is-invalid');
    parent.classList.add('is-valid');
    input.setAttribute('aria-invalid', 'false');
  } else {
    parent.classList.remove('is-valid');
    input.setAttribute('aria-invalid', 'true');
    flag = false;
  }

  return flag;
};

var validateEmailInput = function validateEmailInput(input) {
  var parent = input.closest('[data-validate-type]');
  var flag = true;
  var emailString = /[a-zA-Zа-яёА-ЯЁ0-9]{1}([a-zA-Zа-яёА-ЯЁ0-9\-_\.]{1,})?@[a-zA-Zа-яёА-ЯЁ0-9\-]{1}([a-zA-Zа-яёА-ЯЁ0-9.\-]{1,})?[a-zA-Zа-яёА-ЯЁ0-9\-]{1}\.[a-zA-Zа-яёА-ЯЁ]{2,6}/;
  var regEmail = new RegExp(emailString, '');

  if (regEmail.test(input.value)) {
    parent.classList.remove('is-invalid');
    parent.classList.add('is-valid');
    input.setAttribute('aria-invalid', 'false');
  } else {
    parent.classList.remove('is-valid');
    input.setAttribute('aria-invalid', 'true');
    flag = false;
  }

  return flag;
};

var validateMatrixInput = function validateMatrixInput(input) {
  var parent = input.closest('[data-validate-type]');
  var flag = true;
  var matrix = input.closest('[data-matrix]').dataset.matrix;

  if (input.value.length === matrix.length) {
    parent.classList.remove('is-invalid');
    parent.classList.add('is-valid');
    input.setAttribute('aria-invalid', 'false');
  } else {
    parent.classList.remove('is-valid');
    input.setAttribute('aria-invalid', 'true');
    flag = false;
  }

  return flag;
};

var findSelectedOption = function findSelectedOption(options) {
  var flag = false;
  options.forEach(function (option) {
    if (option.value && option.selected) {
      flag = true;
    }
  });
  return flag;
};

var validateSelect = function validateSelect(input) {
  var parent = input.closest('[data-validate-type]');
  var options = input.querySelectorAll('option');
  var customSelectText = parent.querySelector('.custom-select__text');
  input.setAttribute('aria-invalid', 'false');
  var flag = true;

  if (findSelectedOption(options)) {
    parent.classList.remove('is-invalid');
    parent.classList.add('is-valid');
    input.setAttribute('aria-invalid', 'false');
  } else {
    parent.classList.remove('is-valid');
    input.setAttribute('aria-invalid', 'true');
    customSelectText.innerHTML = '';
    parent.classList.remove('not-empty');
    flag = false;
  }

  return flag;
};

var validateCheckbox = function validateCheckbox(input) {
  var parent = input.closest('[data-validate-type]');
  var flag = true;

  if (input.checked) {
    parent.classList.remove('is-invalid');
    parent.classList.add('is-valid');
  } else {
    parent.classList.remove('is-valid');
    flag = false;
  }

  return flag;
};

var validateInputs = function validateInputs(type, input) {
  switch (type) {
    case 'text':
      return validateTextInput(input);

    case 'phone':
      return validatePhoneInput(input);

    case 'email':
      return validateEmailInput(input);

    case 'matrix':
      return validateMatrixInput(input);

    case 'select':
      return validateSelect(input);

    case 'checkbox':
      return validateCheckbox(input);

    default:
      return false;
  }
};

var returnCheckedElements = function returnCheckedElements(inputs) {
  var flag = false;
  inputs.forEach(function (input) {
    if (input.checked) {
      flag = true;
    }
  });
  return flag;
};

var removeGroupAria = function removeGroupAria(inputs) {
  inputs.forEach(function (input) {
    if (!input.checked) {
      input.removeAttribute('aria-required');
      input.removeAttribute('aria-invalid');
    } else {
      input.setAttribute('aria-required', true);
      input.setAttribute('aria-invalid', false);
    }
  });
};

var setGroupAria = function setGroupAria(inputs) {
  inputs.forEach(function (input) {
    input.setAttribute('aria-required', true);
    input.setAttribute('aria-invalid', true);
  });
};

var validateToggleGroup = function validateToggleGroup(parent) {
  var formElements = parent.querySelectorAll('input');
  var flag = true;

  if (returnCheckedElements(formElements)) {
    removeGroupAria(formElements);
    parent.classList.remove('is-invalid');
    parent.classList.add('is-valid');
  } else {
    setGroupAria(formElements);
    parent.classList.remove('is-valid');
    flag = false;
  }

  return flag;
};

var checkInputValidity = function checkInputValidity(type, input) {
  validateInputs(type, input);
}; // Установка всех действий в полях форм


var formElementLimitationsAction = function formElementLimitationsAction(formValidateElement) {
  var dataLimitations = formValidateElement.dataset.limitations ? formValidateElement.dataset.limitations : null;
  var formElement = formValidateElement.querySelector('input');

  if (!formElement) {
    formElement = formValidateElement.querySelector('textarea');
  }

  if (!formElement) {
    // eslint-disable-next-line no-console
    console.error('В валидируемом блоке отсутствует поле формы');
    return;
  }

  if (dataLimitations) {
    simpleLimitations(formElement, dataLimitations);
  }
};

var formElementMatrixAction = function formElementMatrixAction(formValidateElement) {
  var dataMatrix = formValidateElement.dataset.matrix ? formValidateElement.dataset.matrix : null;
  var dataMatrixLimitations = formValidateElement.dataset.matrixLimitations ? formValidateElement.dataset.matrixLimitations : null;
  var formElement = formValidateElement.querySelector('input');

  if (!formElement) {
    formElement = formValidateElement.querySelector('textarea');
  }

  if (!formElement) {
    // eslint-disable-next-line no-console
    console.error('В валидируемом блоке отсутствует поле формы');
    return;
  }

  if (dataMatrix) {
    simpleMatrix(formElement, dataMatrix, dataMatrixLimitations);
  }
};

var formElementValidateAction = function formElementValidateAction(formValidateElement) {
  var dataValidateType = formValidateElement.dataset.validateType;
  var dataLimitations = formValidateElement.dataset.limitations ? formValidateElement.dataset.limitations : null;
  var dataMatrix = formValidateElement.dataset.matrix ? formValidateElement.dataset.matrix : null;
  var dataMatrixLimitations = formValidateElement.dataset.matrixLimitations ? formValidateElement.dataset.matrixLimitations : null;

  if (dataValidateType !== 'toggle-group') {
    var formElement = formValidateElement.querySelector('input');

    if (!formElement) {
      formElement = formValidateElement.querySelector('textarea');
    }

    if (!formElement) {
      formElement = formValidateElement.querySelector('select');
    }

    if (!formElement) {
      // eslint-disable-next-line no-console
      console.error('В валидируемом блоке отсутствует поле формы');
      return;
    }

    formElement.setAttribute('aria-required', true);
    formElement.setAttribute('aria-invalid', true);

    if (dataLimitations) {
      simpleLimitations(formElement, dataLimitations);
    }

    if (dataMatrix) {
      simpleMatrix(formElement, dataMatrix, dataMatrixLimitations);
    }

    if (dataValidateType === 'phone') {
      if (formElement.value) {
        prettifyPhoneInput(formElement);
      }

      formElement.addEventListener('focus', onFocusPhoneInput);
    }

    formElement.addEventListener('input', function () {
      checkInputValidity(dataValidateType, formElement);
    });
    checkInputValidity(dataValidateType, formElement);
  } else {
    var formElements = formValidateElement.querySelectorAll('input');

    if (formElements.length) {
      formElements.forEach(function (el) {
        el.setAttribute('aria-required', true);
        el.setAttribute('aria-invalid', true);
        el.addEventListener('input', function () {
          validateToggleGroup(formValidateElement);
        });
      });
      validateToggleGroup(formValidateElement);
    } else {
      // eslint-disable-next-line no-console
      console.error('В валидируемом блоке отсутствуют поля формы');
      return;
    }
  }
}; // Обработка события submit на форме


var onFormSubmit = function onFormSubmit(e, callback) {
  var formElements = e.target.querySelectorAll('[aria-required="true"]');
  var groupsFormElement = e.target.querySelectorAll('[data-validate-type="toggle-group"]');

  if (showErrors(formElements, groupsFormElement) && callback && callback.validationSuccessCallback) {
    callback.validationSuccessCallback(e);
  } else if (callback && callback.validationErrorCallback) {
    callback.validationErrorCallback(e);
  } else {
    e.preventDefault();
  }
}; // Очистка полей формы


var clearForm = function clearForm(form) {
  form.reset();
  var formValidateElements = form.querySelectorAll('[data-validate-type]');
  var notEmptyInputs = form.querySelectorAll('.not-empty');
  var invalidInputs = form.querySelectorAll('.is-invalid');
  notEmptyInputs.forEach(function (notEmptyInput) {
    notEmptyInput.classList.remove('not-empty');
  });
  invalidInputs.forEach(function (invalidInput) {
    invalidInput.classList.remove('is-invalid');
  });
  formValidateElements.forEach(function (formValidateElement) {
    var dataValidateType = formValidateElement.dataset.validateType;

    if (dataValidateType !== 'toggle-group') {
      var formElement = formValidateElement.querySelector('input');

      if (!formElement) {
        formElement = formValidateElement.querySelector('textarea');
      }

      if (!formElement) {
        formElement = formValidateElement.querySelector('select');
      }

      if (!formElement) {
        // eslint-disable-next-line no-console
        console.error('В валидируемом блоке отсутствует поле формы');
        return;
      }

      formElement.value = '';
      checkInputValidity(dataValidateType, formElement);
    } else {
      validateToggleGroup(formValidateElement);
    }
  });
};

window.clearForm = clearForm; // Класс FormsValidate

var FormsValidate = /*#__PURE__*/function () {
  function FormsValidate(wrappers) {
    var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, FormsValidate);

    this.wrappers = wrappers;
    this.callback = callback;
  }

  _createClass(FormsValidate, [{
    key: "init",
    value: function init(formWrappers) {
      var _this = this;

      if (!formWrappers) {
        formWrappers = this.wrappers;
      }

      var typeOfNode = Object.prototype.toString.call(formWrappers);

      if (typeOfNode === '[object HTMLCollection]' || typeOfNode === '[object NodeList]' || typeOfNode === '[object Array]') {
        formWrappers.forEach(function (wrapper) {
          if (wrapper.classList.contains('is-initialized')) {
            // eslint-disable-next-line no-console
            console.error('На данной форме валидация уже инициализированна');
          } else {
            _this.initItem(wrapper);
          }
        });
      } else if (typeOfNode === '[object HTMLDivElement]' || typeOfNode === '[object HTMLElement]') {
        if (!formWrappers.classList.contains('is-initialized')) {
          this.initItem(formWrappers);
        }
      } else {
        // eslint-disable-next-line no-console
        console.error('Переданный обьект не соответствует формату');
        return;
      }
    }
  }, {
    key: "initItem",
    value: function initItem(element) {
      var _this2 = this;

      element.classList.add('is-initialized');
      var form = element.querySelector('form');
      var resetButtons = form.querySelectorAll('button[type="reset"], [data-reset]');
      form.noValidate = true;
      form.addEventListener('submit', function (e) {
        onFormSubmit(e, _this2.callback);
      });

      if (resetButtons.length) {
        resetButtons.forEach(function (btn) {
          btn.addEventListener('click', function (e) {
            e.preventDefault();
            clearForm(form);
          });
        });
      }

      var formValidateElements = form.querySelectorAll('[data-validate-type]');
      var formLimitationsElements = form.querySelectorAll('[data-limitations]:not([data-validate-type])');
      var formMatrixElements = form.querySelectorAll('[data-matrix]:not([data-validate-type])');

      if (formValidateElements.length) {
        formValidateElements.forEach(function (el) {
          formElementValidateAction(el);
        });
      }

      if (formLimitationsElements.length) {
        formLimitationsElements.forEach(function (el) {
          formElementLimitationsAction(el);
        });
      }

      if (formMatrixElements.length) {
        formMatrixElements.forEach(function (el) {
          formElementMatrixAction(el);
        });
      }
    }
  }]);

  return FormsValidate;
}();


window.FormsValidate = FormsValidate;

/***/ }),

/***/ "./js/modules/form/init-custom-select.js":
/*!***********************************************!*\
  !*** ./js/modules/form/init-custom-select.js ***!
  \***********************************************/
/*! exports provided: initCustomSelect */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initCustomSelect", function() { return initCustomSelect; });
/* harmony import */ var _custom_select__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./custom-select */ "./js/modules/form/custom-select.js");


var initCustomSelect = function initCustomSelect() {
  var customSelect = new _custom_select__WEBPACK_IMPORTED_MODULE_0__["default"]();
  customSelect.init();
};



/***/ }),

/***/ "./js/modules/form/init-form-validate.js":
/*!***********************************************!*\
  !*** ./js/modules/form/init-form-validate.js ***!
  \***********************************************/
/*! exports provided: initFormValidate */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initFormValidate", function() { return initFormValidate; });
/* harmony import */ var _form_validate__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./form-validate */ "./js/modules/form/form-validate.js");

var formWrappers = document.querySelectorAll('[data-validate]');

var resetForm = function resetForm(form) {
  setTimeout(function () {
    window.clearForm(form);
  }, 1000);
};

var baseValidationSuccessCallback = function baseValidationSuccessCallback(e) {
  e.preventDefault(); // В данном колбеке бэкендер будет писать запрос на отправку формы на сервер и обрабатывать возможные ошибки при отправке

  resetForm(e.target);
};

var baseValidationErrorCallback = function baseValidationErrorCallback(e) {
  e.preventDefault();
};

var customExampleValidationSuccessCallback = function customExampleValidationSuccessCallback(e) {
  e.preventDefault(); // В данном колбеке бэкендер будет писать запрос на отправку формы на сервер и обрабатывать возможные ошибки при отправке

  resetForm(e.target); // eslint-disable-next-line no-console

  console.log('Ваша форма успешна отправлена');
};

var customExampleValidationErrorCallback = function customExampleValidationErrorCallback(e) {
  e.preventDefault(); // eslint-disable-next-line no-console

  console.error('Отправка формы невозможна, заполните все обязательные поля');
};

var callbacks = {
  base: {
    // Колбек при успешной валидации формы при попытке её отправки
    validationSuccessCallback: baseValidationSuccessCallback,
    // Колбек при не успешной валидации формы при попытке её отправки, не связан с запросами на сервер
    validationErrorCallback: baseValidationErrorCallback
  },
  customExample: {
    validationSuccessCallback: customExampleValidationSuccessCallback,
    validationErrorCallback: customExampleValidationErrorCallback
  }
};

var setCustomPhoneInputsEvent = function setCustomPhoneInputsEvent() {
  if (document.querySelectorAll('[data-validate-type="phone"] input').length) {
    document.querySelector('html').addEventListener('input', function (_ref) {
      var target = _ref.target;

      if (target.closest('[data-validate-type="phone"]')) {
        target.closest('[data-validate-type="phone"]').querySelector('input').dispatchEvent(new Event('input'));
      }
    });
  }
};

var initFormValidate = function initFormValidate() {
  if (formWrappers.length) {
    setCustomPhoneInputsEvent();
    formWrappers.forEach(function (wrapper) {
      var callback = wrapper.dataset.callback;

      if (!callback) {
        callback = 'base';
      }

      var formValidate = new _form_validate__WEBPACK_IMPORTED_MODULE_0__["default"](wrapper, callbacks[callback]);
      return formValidate.init();
    });
  }
};



/***/ }),

/***/ "./js/modules/header.js":
/*!******************************!*\
  !*** ./js/modules/header.js ***!
  \******************************/
/*! exports provided: getHeaderHeight */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getHeaderHeight", function() { return getHeaderHeight; });
var getHeaderHeight = function getHeaderHeight() {
  var header = document.querySelector('.header');

  if (!header) {
    return 0;
  }

  return header.offsetHeight;
};



/***/ }),

/***/ "./js/modules/init-accordion.js":
/*!**************************************!*\
  !*** ./js/modules/init-accordion.js ***!
  \**************************************/
/*! exports provided: initAccordions, accordions */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initAccordions", function() { return initAccordions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "accordions", function() { return accordions; });
/* harmony import */ var _accordions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./accordions */ "./js/modules/accordions.js");

var accordions;

var initAccordions = function initAccordions() {
  accordions = new _accordions__WEBPACK_IMPORTED_MODULE_0__["Accordions"](); // Используйте в разработке экспортируемую переменную accordions, window сделан для бэкэнда

  window.accordions = accordions;
  var breakpointDesktop = window.matchMedia('(min-width:1280px)');
  var breakpointTablet = window.matchMedia('(max-width:1279px)');
  var sidebar = document.querySelector('.main-content__sidebar');

  var addsClassActive = function addsClassActive() {
    if (sidebar) {
      if (breakpointDesktop.matches) {
        sidebar.classList.add('is-active');
      } else if (breakpointTablet.matches) {
        sidebar.classList.remove('is-active');
      }
    }
  };

  if (sidebar) {
    addsClassActive();
    window.addEventListener('resize', function () {
      addsClassActive();
    }, false);
  }
};



/***/ }),

/***/ "./js/modules/navigation/main-nav.js":
/*!*******************************************!*\
  !*** ./js/modules/navigation/main-nav.js ***!
  \*******************************************/
/*! exports provided: initNavToggle */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initNavToggle", function() { return initNavToggle; });
// Константы
var dropdownToggle = document.querySelectorAll('[data-dropdown-toggle]');
var dropdownList = document.querySelectorAll('[data-dropdown]');
var DROPDOWN_TOGGLE_CLASS = '.main-nav__dropdown-toggle';
var DROPDOWN_LIST_CLASS = '.main-nav__dropdown'; // Закрытие меню по клику по оверлею

var navOverlayClick = function navOverlayClick(evt) {
  if (!evt.target.closest(DROPDOWN_TOGGLE_CLASS) && !evt.target.closest(DROPDOWN_LIST_CLASS)) {
    dropdownList.forEach(function (item) {
      return item.setAttribute('hidden', 'hidden');
    });
    dropdownToggle.forEach(function (item) {
      return item.querySelector('svg').classList.remove('is-open');
    });
  }
}; // Функция отображения разделов меню


var onNavToggleClick = function onNavToggleClick(evt, toggleName) {
  // let buttonElement;
  var buttonId;
  var toggleIcon;
  var listElement;

  if (evt.target === dropdownToggle || evt.target.closest(toggleName)) {
    // buttonElement = evt.target.closest(toggleName);
    buttonId = evt.target.closest(toggleName).dataset.dropdownToggle;
    toggleIcon = evt.target.closest(toggleName).querySelector('svg');
  }

  if (!buttonId) {
    return;
  }

  dropdownList.forEach(function (list) {
    if (list.dataset.dropdown === buttonId) {
      listElement = list;
    }
  });

  if (listElement.hasAttribute('hidden')) {
    dropdownList.forEach(function (list) {
      return list.setAttribute('hidden', 'hidden');
    });
    dropdownToggle.forEach(function (toggle) {
      return toggle.querySelector('svg').classList.remove('is-open');
    });
    listElement.removeAttribute('hidden');
    toggleIcon.classList.add('is-open');
    document.addEventListener('click', navOverlayClick);
  } else {
    listElement.setAttribute('hidden', 'hidden');
    toggleIcon.classList.remove('is-open');
    document.removeEventListener('click', navOverlayClick);
  }
}; // Установка обработчиков отображения разделов меню.


var initNavToggle = function initNavToggle() {
  dropdownToggle.forEach(function (toggle) {
    toggle.addEventListener('click', function (evt) {
      onNavToggleClick(evt, DROPDOWN_TOGGLE_CLASS);
    });
  });
};



/***/ }),

/***/ "./js/modules/navigation/mobile-menu.js":
/*!**********************************************!*\
  !*** ./js/modules/navigation/mobile-menu.js ***!
  \**********************************************/
/*! exports provided: initMobileMenu */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initMobileMenu", function() { return initMobileMenu; });
// Константы и переменные
var body = document.querySelector('body');
var mainNav = document.querySelector('[data-main-nav]');
var mainNavOpenButton = document.querySelector('[data-nav-open]');
var mainNavCloseButton = document.querySelector('[data-nav-close]');
var MOBILE_MENU_ACTIVE_CLASS = 'is-active';
var MAIN_NAV_BLOCK_CLASS = '.main-nav__wrapper'; // Утилиты

var isEscEvent = function isEscEvent(evt) {
  return evt.key === 'Escape' || evt.key === 'Esc';
}; // Открытие и закрытие мобильного меню


function openNav() {
  body.classList.add('scroll-lock--mobile-nav-open');
  mainNav.classList.add(MOBILE_MENU_ACTIVE_CLASS);
  mainNav.addEventListener('click', onSpaceAroundNavClick);
  mainNavCloseButton.addEventListener('click', closeNav);
  document.addEventListener('keydown', onNavEscKeyDown);
}

function closeNav() {
  body.classList.remove('scroll-lock--mobile-nav-open');
  mainNav.classList.remove(MOBILE_MENU_ACTIVE_CLASS);
  listenersRemove();
}

function onSpaceAroundNavClick(evt) {
  var target = evt.target;

  if (!target.closest(MAIN_NAV_BLOCK_CLASS)) {
    closeNav();
  }
}

function onNavEscKeyDown(evt) {
  if (isEscEvent(evt)) {
    closeNav();
    listenersRemove();
  }
} // Удаление обработчиков


function listenersRemove() {
  mainNav.removeEventListener('click', onSpaceAroundNavClick);
  mainNavCloseButton.removeEventListener('click', closeNav);
  document.removeEventListener('keydown', onNavEscKeyDown);
} // Установка обработчика отображения мобильного меню


var initMobileMenu = function initMobileMenu() {
  if (mainNavOpenButton) {
    mainNavOpenButton.addEventListener('click', openNav);
  }
};



/***/ }),

/***/ "./js/modules/range.js":
/*!*****************************!*\
  !*** ./js/modules/range.js ***!
  \*****************************/
/*! exports provided: initRange */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initRange", function() { return initRange; });
var initRange = function initRange() {
  var rangeList = document.querySelectorAll('.js-range');

  if (!rangeList.length) {
    return;
  }

  rangeList.forEach(function (range) {
    var inputMin = range.querySelector('.js-range-input-min input');
    var inputMax = range.querySelector('.js-range-input-max input');
    var rangeSlider = range.querySelector('.js-range-slider');
    var stepValue;
    var minValue;
    var maxValue;

    if (inputMin.getAttribute('step')) {
      stepValue = +inputMin.getAttribute('step');
    } else {
      stepValue = +inputMin.getAttribute('data-step');
    }

    if (inputMin.getAttribute('min')) {
      minValue = +inputMin.getAttribute('min');
    } else {
      minValue = +inputMin.getAttribute('data-min');
    }

    if (inputMax.getAttribute('max')) {
      maxValue = +inputMax.getAttribute('max');
    } else {
      maxValue = +inputMax.getAttribute('data-max');
    }

    var numberFormat = window.wNumb({
      decimals: 0
    });
    window.noUiSlider.create(rangeSlider, {
      start: [numberFormat.from(inputMin.value), numberFormat.from(inputMax.value)],
      connect: true,
      step: stepValue,
      format: numberFormat,
      range: {
        'min': minValue,
        'max': maxValue
      }
    });
    rangeSlider.noUiSlider.on('update', function (values, handle) {
      var value = values[handle]; // min input

      if (handle === 0) {
        inputMin.value = value;
      } // max input


      if (handle === 1) {
        inputMax.value = value;
      }
    });
    inputMin.addEventListener('change', function () {
      rangeSlider.noUiSlider.set([numberFormat.from(inputMin.value), null]);
    });
    inputMax.addEventListener('change', function () {
      rangeSlider.noUiSlider.set([null, numberFormat.from(inputMax.value)]);
    });
  });
};



/***/ }),

/***/ "./js/modules/scroll-animation.js":
/*!****************************************!*\
  !*** ./js/modules/scroll-animation.js ***!
  \****************************************/
/*! exports provided: initScrollAnimation, changeAnimation, startAnimations, stopAnimations */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initScrollAnimation", function() { return initScrollAnimation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "changeAnimation", function() { return changeAnimation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "startAnimations", function() { return startAnimations; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "stopAnimations", function() { return stopAnimations; });
/* harmony import */ var _header__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./header */ "./js/modules/header.js");
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }


var mainWrapper = null;
var intersectionElements;
var animationObserver;
var Section = {};
var RANGE = {
  BG_OPACITY: {
    MIN: 0,
    MAX: 1
  },
  LINE_SCALE: {
    MIN: 0,
    MAX: 1
  },
  TRANSLATE: {
    MIN: 0,
    MAX: 100
  },
  IMG_SCALE: {
    MIN: 100,
    MAX: 140
  }
};
var animElements = [];

var animationMain = function animationMain(sectionElement, animName, viewportHeight) {
  var element = sectionElement.element,
      firstLoad = sectionElement.firstLoad;
  var opElements = element.querySelectorAll('.js-opacity');
  var transElements = element.querySelectorAll('.js-translate');

  if (firstLoad) {
    animElements.push.apply(animElements, _toConsumableArray(opElements).concat(_toConsumableArray(transElements)));
    Section[animName].firstLoad = false;
  }

  var clientRect = element.getBoundingClientRect();
  var oneOpacity = (RANGE.BG_OPACITY.MAX - RANGE.BG_OPACITY.MIN) / viewportHeight;
  var oneTranslate = (RANGE.TRANSLATE.MAX - RANGE.TRANSLATE.MIN) / viewportHeight;
  var bgOpacity = 0;
  var elTranslate = 0;

  if (clientRect.top >= viewportHeight) {
    bgOpacity = RANGE.BG_OPACITY.MIN;
    elTranslate = RANGE.TRANSLATE.MAX;
  } else if (clientRect.bottom <= viewportHeight) {
    bgOpacity = RANGE.BG_OPACITY.MAX;
    elTranslate = RANGE.TRANSLATE.MIN;
  } else {
    bgOpacity = oneOpacity * (viewportHeight - (clientRect.bottom - viewportHeight));
    elTranslate = oneTranslate * (clientRect.bottom - viewportHeight);
  }

  if (opElements.length > 0) {
    opElements.forEach(function (el) {
      el.style.opacity = bgOpacity;
    });
  }

  if (transElements.length > 0) {
    transElements.forEach(function (el) {
      if (el.classList.contains('js-left')) {
        el.style.transform = "translateX(-".concat(elTranslate, "%)");
      }

      if (el.classList.contains('js-right')) {
        el.style.transform = "translateX(".concat(elTranslate, "%)");
      }
    });
  }
};

var animationGreeting = function animationGreeting(sectionElement, animName, viewportHeight) {
  var element = sectionElement.element,
      firstLoad = sectionElement.firstLoad;
  var line = element.querySelector('.js-line');

  if (firstLoad) {
    animElements.push(line);
    Section[animName].firstLoad = false;
  }

  var clientRect = element.getBoundingClientRect();
  var oneScale = (RANGE.LINE_SCALE.MAX - RANGE.LINE_SCALE.MIN) / viewportHeight;
  var lineScale = 0;

  if (clientRect.top >= viewportHeight) {
    lineScale = RANGE.LINE_SCALE.MIN;
  } else if (clientRect.bottom <= viewportHeight) {
    lineScale = RANGE.LINE_SCALE.MAX;
  } else {
    lineScale = oneScale * (viewportHeight - (clientRect.bottom - viewportHeight));
  }

  if (line) {
    line.style.transform = "scaleX(".concat(lineScale, ")");
  }
};

var animationPromo = function animationPromo(sectionElement, animName) {
  var element = sectionElement.element,
      firstLoad = sectionElement.firstLoad;
  var imgs = element.querySelectorAll('.js-img img');

  if (firstLoad) {
    animElements.push.apply(animElements, _toConsumableArray(imgs));
    Section[animName].firstLoad = false;
  }

  var clientRect = element.getBoundingClientRect();
  var oneScale = (RANGE.IMG_SCALE.MAX - RANGE.IMG_SCALE.MIN) / clientRect.height;
  var imgScale = 45;

  if (clientRect.top >= Object(_header__WEBPACK_IMPORTED_MODULE_0__["getHeaderHeight"])()) {
    imgScale = RANGE.IMG_SCALE.MIN;
  } else if (clientRect.bottom <= Object(_header__WEBPACK_IMPORTED_MODULE_0__["getHeaderHeight"])()) {
    imgScale = RANGE.IMG_SCALE.MAX;
  } else {
    imgScale = oneScale * Math.abs((Object(_header__WEBPACK_IMPORTED_MODULE_0__["getHeaderHeight"])() + clientRect.height) * 2.4 - clientRect.top);
  }

  if (imgs.length > 0) {
    imgs.forEach(function (el) {
      el.style.width = "".concat(imgScale, "%");
      el.style.height = "".concat(imgScale, "%");
    });
  }
};

var changeAnimation = function changeAnimation() {
  var viewportHeight = document.documentElement.clientHeight;

  for (var _i = 0, _Object$entries = Object.entries(Section); _i < _Object$entries.length; _i++) {
    var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
        animName = _Object$entries$_i[0],
        option = _Object$entries$_i[1];

    if (option.isActive) {
      switch (animName) {
        case 'promo':
          animationPromo(Section[animName], animName);
          break;

        case 'greeting':
        case 'form':
          animationGreeting(Section[animName], animName, viewportHeight);
          break;

        case 'main':
        case 'geography':
          animationMain(Section[animName], animName, viewportHeight);
          break;
      }
    }
  }
};

var handlerIntersection = function handlerIntersection(entries) {
  entries.forEach(function (entry) {
    var target = entry.target;
    var elementName = target.dataset.scrollContainer;

    if (entry.isIntersecting) {
      Section[elementName].isActive = true;
    } else {
      Section[elementName].isActive = false;
    }
  });
};

var isStopped = true;

var stopAnimations = function stopAnimations() {
  if (isStopped) {
    return;
  }

  intersectionElements.forEach(function (slide) {
    animationObserver.unobserve(slide);
  });
  animElements.forEach(function (el) {
    if (!el) {
      return;
    }

    el.style = '';
  });
  isStopped = true;
};

var startAnimations = function startAnimations() {
  if (!isStopped) {
    return;
  }

  intersectionElements.forEach(function (slide) {
    animationObserver.observe(slide);
  });
  changeAnimation();
  isStopped = false;
};

var setElement = function setElement(slide) {
  var sectionName = slide.dataset.scrollContainer;

  if (!sectionName) {
    return;
  }

  Section[sectionName] = {
    isActive: true,
    element: slide,
    firstLoad: true
  };
};

var initScrollAnimation = function initScrollAnimation(wrapper) {
  if (!wrapper) {
    return;
  }

  mainWrapper = wrapper;
  animationObserver = new IntersectionObserver(handlerIntersection);
  intersectionElements = mainWrapper.querySelectorAll('[data-scroll-container]');
  intersectionElements.forEach(setElement);
};



/***/ }),

/***/ "./js/modules/scroll-sequence.js":
/*!***************************************!*\
  !*** ./js/modules/scroll-sequence.js ***!
  \***************************************/
/*! exports provided: initScrollSequence */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initScrollSequence", function() { return initScrollSequence; });
/* harmony import */ var _scroll_animation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./scroll-animation */ "./js/modules/scroll-animation.js");

var MEDIA_DESKTOP = '(min-width: 1024px)';
var mainWrapper = document.querySelector('.js-scroll-sequence');

var checkMedia = function checkMedia() {
  if (window.matchMedia(MEDIA_DESKTOP).matches) {
    Object(_scroll_animation__WEBPACK_IMPORTED_MODULE_0__["startAnimations"])();
  } else {
    Object(_scroll_animation__WEBPACK_IMPORTED_MODULE_0__["stopAnimations"])();
  }
};

var currentScrollY = window.scrollY;

var onWindowScroll = function onWindowScroll() {
  var scrollDiff = window.scrollY - currentScrollY;

  if (window.matchMedia(MEDIA_DESKTOP).matches) {
    Object(_scroll_animation__WEBPACK_IMPORTED_MODULE_0__["changeAnimation"])(scrollDiff);
  }

  currentScrollY = window.scrollY;
};

var initScrollSequence = function initScrollSequence() {
  if (!mainWrapper) {
    return;
  }

  Object(_scroll_animation__WEBPACK_IMPORTED_MODULE_0__["initScrollAnimation"])(mainWrapper);
  checkMedia();
  window.addEventListener('resize', function () {
    setTimeout(checkMedia, 200);
  });
  window.addEventListener('scroll', onWindowScroll);
};



/***/ }),

/***/ "./js/modules/slider/gallery-slider.js":
/*!*********************************************!*\
  !*** ./js/modules/slider/gallery-slider.js ***!
  \*********************************************/
/*! exports provided: initGallerySliders */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initGallerySliders", function() { return initGallerySliders; });
var gallerySwipers = [];
window.gallerySwipers = gallerySwipers;
var initGallerySliders = function initGallerySliders() {
  var gallerySliders = document.querySelectorAll('.gallery-slider');

  if (!gallerySliders) {
    return;
  }

  gallerySliders.forEach(function (slider) {
    var swiperNode = slider.querySelector('.swiper');
    var btnPrev = slider.querySelector('.swiper-button-prev');
    var btnNext = slider.querySelector('.swiper-button-next'); // eslint-disable-next-line no-undef

    var swiper = new Swiper(swiperNode, {
      loop: true,
      slidesPerView: 3,
      spaceBetween: 30,
      navigation: {
        nextEl: btnNext,
        prevEl: btnPrev
      },
      breakpoints: {
        0: {
          slidesPerView: 1
        },
        540: {
          slidesPerView: 2
        },
        1023: {
          slidesPerView: 2
        },
        1279: {
          slidesPerView: 3
        }
      }
    });
    gallerySwipers.push(swiper);
  });
};

/***/ }),

/***/ "./js/modules/slider/geography-slider.js":
/*!***********************************************!*\
  !*** ./js/modules/slider/geography-slider.js ***!
  \***********************************************/
/*! exports provided: initGeographySlider */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initGeographySlider", function() { return initGeographySlider; });
/* globals Swiper */
function initGeographySlider() {
  var sliderGeography = document.querySelector('.project-geography__slider');

  if (!sliderGeography) {
    return;
  }

  var breakpoint = window.matchMedia('(min-width:1024px)');
  var slider;

  var initSliderCard = function initSliderCard() {
    // eslint-disable-next-line
    slider = new Swiper(sliderGeography, {
      a11y: {
        enabled: true,
        firstSlideMessage: 'Первый слайд',
        lastSlideMessage: 'Последний слайд',
        nextSlideMessage: 'Следующий слайд',
        prevSlideMessage: 'Предыдущий слайд',
        paginationBulletMessage: 'Перейти к слайду {{index}}',
        slideLabelMessage: 'Слайд {{index}} из {{slidesLength}}'
      },
      wrapperClass: 'project-geography__cards',
      slideClass: 'card',
      slideActiveClass: 'card--active',
      slidePrevClass: 'card--prev',
      slideNextClass: 'card--next',
      loop: true,
      pagination: {
        el: '.project-geography__pagination',
        clickable: true,
        type: 'bullets',
        bulletElement: 'button',
        bulletClass: 'pagination__button pagination__button--lg pagination__button--rectangle',
        bulletActiveClass: 'pagination__button--active',
        renderBullet: function renderBullet(index, className) {
          return "<button class=\"".concat(className, "\" type=\"button\" data-slide=\"").concat(++index, "\"></button>");
        }
      },
      keyboard: {
        enabled: true
      },
      breakpoints: {
        320: {
          slidesPerView: 'auto',
          slidesPerGroup: 1
        }
      }
    });
  };

  var breakpointChecker = function breakpointChecker() {
    if (breakpoint.matches) {
      if (sliderGeography.classList.contains('swiper-initialized')) {
        slider.destroy(false, true);
      }
    } else {
      initSliderCard();
    }
  };

  breakpoint.addListener(breakpointChecker);
  breakpointChecker();
}



/***/ }),

/***/ "./js/modules/slider/product-slider.js":
/*!*********************************************!*\
  !*** ./js/modules/slider/product-slider.js ***!
  \*********************************************/
/*! exports provided: initProductSlider */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initProductSlider", function() { return initProductSlider; });
var sliderBase = document.querySelector('.product-slider');
var pageWrapper = document.querySelector('.wrapper');
var SLIDER_TRANSLATION = {
  enabled: true,
  firstSlideMessage: 'Первое фото',
  lastSlideMessage: 'Последнее фото',
  nextSlideMessage: 'Следующее фото',
  prevSlideMessage: 'Предыдуще фото',
  paginationBulletMessage: 'Перейти к слайду под номером {{index}}',
  slideLabelMessage: 'Фото {{index}} из {{slidesLength}}'
};

var initProductSlider = function initProductSlider() {
  if (sliderBase) {
    var sliderMainBase = sliderBase.querySelector('.product-slider__main');
    var sliderThumbsBase = sliderBase.querySelector('.product-slider__thumbs');
    var sliderThumbsSlides = sliderThumbsBase.querySelectorAll('.product-slider__thumbs-item');
    var modalOverlay = sliderBase.querySelector('.product-slider__modal-overlay');
    var sliderModalBase = sliderBase.querySelector('.product-slider__modal');
    var sliderModalButtonClose = sliderBase.querySelector('.product-slider__modal-button-close');
    var swiperThumbs = new window.Swiper(sliderThumbsBase, {
      spaceBetween: 10,
      slidesPerView: 'auto',
      freeMode: true,
      watchSlidesProgress: true,
      a11y: SLIDER_TRANSLATION
    });
    var swiperMain = new window.Swiper(sliderMainBase, {
      spaceBetween: 10,
      navigation: {
        nextEl: '.product-slider__button--next',
        prevEl: '.product-slider__button--prev',
        disabledClass: 'product-slider__button--disabled'
      },
      thumbs: {
        swiper: swiperThumbs
      },
      a11y: SLIDER_TRANSLATION
    });
    swiperMain.on('activeIndexChange', function () {
      var sliderThumbsActiveClass = 'product-slider__thumbs-item--active';
      sliderThumbsSlides.forEach(function (slide) {
        slide.classList.remove(sliderThumbsActiveClass);
      });
      sliderThumbsSlides[swiperMain.activeIndex].classList.add(sliderThumbsActiveClass);
    });
    var swiperModal = new window.Swiper(sliderModalBase, {
      spaceBetween: 10,
      navigation: {
        nextEl: '.product-slider__button-modal--next',
        prevEl: '.product-slider__button-modal--prev',
        disabledClass: 'product-slider__button--disabled'
      },
      keyboard: {
        enabled: true,
        onlyInViewport: false
      },
      a11y: SLIDER_TRANSLATION
    });

    var openSliderModal = function openSliderModal() {
      modalOverlay.classList.add('product-slider__modal-overlay--active');
      swiperModal.slideTo(swiperMain.activeIndex, 1);
      pageWrapper.classList.add('wrapper--no-scrollbar');
    };

    var closeSliderModal = function closeSliderModal() {
      modalOverlay.classList.remove('product-slider__modal-overlay--active');
      swiperMain.slideTo(swiperModal.activeIndex, 1);
      pageWrapper.classList.remove('wrapper--no-scrollbar');
    };

    sliderMainBase.addEventListener('click', function (evt) {
      if (evt.target.tagName === 'IMG') {
        openSliderModal();
        modalOverlay.addEventListener('click', function (e) {
          if (e.target === modalOverlay) {
            closeSliderModal();
          }
        });
        sliderModalButtonClose.addEventListener('click', function () {
          closeSliderModal();
        });
        window.addEventListener('keydown', function (e) {
          if (e.key === 'Escape') {
            closeSliderModal();
          }
        });
      }
    });
  }
};



/***/ }),

/***/ "./js/modules/slider/promo-slider.js":
/*!*******************************************!*\
  !*** ./js/modules/slider/promo-slider.js ***!
  \*******************************************/
/*! exports provided: initPromoSlider */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initPromoSlider", function() { return initPromoSlider; });
/* globals Swiper */
function initPromoSlider() {
  var sliderPromo = document.querySelector('.promo__slider');

  if (!sliderPromo) {
    return;
  } // eslint-disable-next-line


  var slider = new Swiper(sliderPromo, {
    a11y: {
      enabled: true,
      firstSlideMessage: 'Первый слайд',
      lastSlideMessage: 'Последний слайд',
      nextSlideMessage: 'Следующий слайд',
      prevSlideMessage: 'Предыдущий слайд',
      paginationBulletMessage: 'Перейти к слайду {{index}}',
      slideLabelMessage: 'Слайд {{index}} из {{slidesLength}}'
    },
    wrapperClass: 'promo__slides',
    slideClass: 'promo__slide',
    slideActiveClass: 'promo__slide--active',
    slidePrevClass: 'promo__slide--prev',
    slideNextClass: 'promo__slide--next',
    loop: true,
    pagination: {
      el: '.promo__pagination',
      clickable: true,
      type: 'bullets',
      bulletElement: 'button',
      bulletClass: 'pagination__button pagination__button--rectangle',
      bulletActiveClass: 'pagination__button--active',
      renderBullet: function renderBullet(index, className) {
        return "<button class=\"".concat(className, "\" type=\"button\" data-slide=\"").concat(++index, "\"></button>");
      }
    },
    keyboard: {
      enabled: true
    }
  }); // eslint-disable-next-line consistent-return

  return slider;
}



/***/ }),

/***/ "./js/modules/sticky.js":
/*!******************************!*\
  !*** ./js/modules/sticky.js ***!
  \******************************/
/*! exports provided: initSticky */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initSticky", function() { return initSticky; });
var initSticky = function initSticky() {
  var stickyFilter = document.querySelector('.filters');
  var minWidthDesktop = window.matchMedia('(min-width: 768px)');
  var maxWidthMobile = window.matchMedia('(max-width: 767px)');

  if (!stickyFilter) {
    return;
  }

  if (stickyFilter) {
    var heightHeader = document.querySelector('.header').offsetHeight;
    var indentWithoutCatalog = heightHeader;
    var indentWithCatalog;

    var changesStylesOnResize = function changesStylesOnResize() {
      if (minWidthDesktop.matches) {
        indentWithCatalog = 14;
        changesСlass();
      } else if (maxWidthMobile.matches) {
        indentWithCatalog = 0;
        changesСlass();
      }
    };

    var changesСlass = function changesСlass() {
      if (stickyFilter.getBoundingClientRect().top === indentWithCatalog) {
        stickyFilter.classList.add('filters--active');
      } else if (stickyFilter.getBoundingClientRect().top !== indentWithoutCatalog) {
        stickyFilter.classList.remove('filters--active');
      }
    };

    changesStylesOnResize();
    window.addEventListener('resize', function () {
      changesStylesOnResize();
    }, false);
    window.addEventListener('scroll', function () {
      changesСlass();
    });
  }
};



/***/ }),

/***/ "./js/modules/tabs/init-tabs.js":
/*!**************************************!*\
  !*** ./js/modules/tabs/init-tabs.js ***!
  \**************************************/
/*! exports provided: initTabs, tabs */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initTabs", function() { return initTabs; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tabs", function() { return tabs; });
/* harmony import */ var _tabs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tabs */ "./js/modules/tabs/tabs.js");

var tabs;

var initTabs = function initTabs() {
  tabs = new _tabs__WEBPACK_IMPORTED_MODULE_0__["Tabs"](); // Используйте в разработке экспортируемую переменную tabs, window сделан для бэкэнда

  window.tabs = tabs;
};



/***/ }),

/***/ "./js/modules/tabs/tabs.js":
/*!*********************************!*\
  !*** ./js/modules/tabs/tabs.js ***!
  \*********************************/
/*! exports provided: Tabs */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Tabs", function() { return Tabs; });
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var Tabs = /*#__PURE__*/function () {
  function Tabs(callback) {
    _classCallCheck(this, Tabs);

    this._windowWidth = window.innerWidth;
    this._documentClickHandler = this._documentClickHandler.bind(this);

    this._init();

    this.callback = callback;
  }

  _createClass(Tabs, [{
    key: "_init",
    value: function _init() {
      this._initAllTabs();

      document.addEventListener('click', this._documentClickHandler);
    }
  }, {
    key: "_resizeObserver",
    value: function _resizeObserver() {
      var _this = this;

      return new ResizeObserver(function (entries) {
        var _iterator = _createForOfIteratorHelper(entries),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var entry = _step.value;

            if (entry.target.classList.contains('is-active')) {
              _this._updateTabHeight();
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      });
    }
  }, {
    key: "_documentClickHandler",
    value: function _documentClickHandler(evt) {
      var target = evt.target;

      if (!target.closest('[data-tabs="control"]')) {
        return;
      }

      evt.preventDefault();
      var control = target.closest('[data-tabs="control"]');
      this.openTab(control);
    }
  }, {
    key: "_initAllTabs",
    value: function _initAllTabs() {
      var _this2 = this;

      var tabs = document.querySelectorAll('[data-tabs="parent"]');
      tabs.forEach(function (tab) {
        _this2._initTab(tab);
      });
    }
  }, {
    key: "_removeAllActiveClasses",
    value: function _removeAllActiveClasses(tabControlElements, tabElements) {
      tabElements.forEach(function (tab) {
        tab.classList.remove('is-active');
      });
      tabControlElements.forEach(function (element, index) {
        element.classList.remove('is-active');
        element.setAttribute('data-index', index);
      });
    }
  }, {
    key: "_setTabStartState",
    value: function _setTabStartState(tab, dataHeight, tabElements, tabContentElement, tabControlElements, dataDelay) {
      var activeIndex = this._returnActiveIndex(tabControlElements);

      var blockHeight = dataHeight === 'max' ? this._returnMaxHeight(tabElements) : tabElements[activeIndex].offsetHeight;

      this._removeAllActiveClasses(tabControlElements, tabElements);

      tab.classList.add('no-transition');
      tabControlElements[activeIndex].classList.add('is-active');
      tabElements[activeIndex].classList.add('is-active');
      tabContentElement.style.height = "".concat(blockHeight, "px");
      setTimeout(function () {
        if (dataDelay) {
          tab.classList.remove('no-transition');
        }
      }, dataDelay);
    }
  }, {
    key: "_returnActiveIndex",
    value: function _returnActiveIndex(tabControlElements) {
      var activeIndex = 0;
      var flag = true;
      tabControlElements.forEach(function (control, index) {
        if (control.classList.contains('is-active') && flag) {
          activeIndex = index;
          flag = false;
        }
      });
      return activeIndex;
    }
  }, {
    key: "_returnMaxHeight",
    value: function _returnMaxHeight(tabElements) {
      var height = [];
      tabElements.forEach(function (element) {
        height.push(element.offsetHeight);
      });
      height.sort(function (a, b) {
        return a - b;
      });
      return height[height.length - 1];
    }
  }, {
    key: "_returnScopeList",
    value: function _returnScopeList(nodeList, parent) {
      var array = [];
      nodeList.forEach(function (element) {
        var elementParent = element.closest('[data-tabs="parent"]');

        if (elementParent === parent) {
          array.push(element);
        }
      });
      return array;
    }
  }, {
    key: "_returnScopeChild",
    value: function _returnScopeChild(nodeList, parent) {
      var currentChild;
      nodeList.forEach(function (element) {
        var elementParent = element.closest('[data-tabs="parent"]');

        if (elementParent === parent) {
          currentChild = element;
        }
      });
      return currentChild;
    }
  }, {
    key: "_updateTabHeight",
    value: function _updateTabHeight() {
      var _this3 = this;

      var activeElements = document.querySelectorAll('[data-tabs="element"].is-active');
      activeElements.forEach(function (element) {
        var transition = false;
        var parent = element.closest('[data-tabs="parent"]');

        if (parent.closest('[data-tabs="element"]')) {
          transition = true;
        }

        _this3._setTabElementHeight(element, transition);
      });
    }
  }, {
    key: "_setTabElementHeight",
    value: function _setTabElementHeight(element, transition) {
      var parentElement = element.closest('[data-tabs="parent"]');
      var dataHeight = parentElement.dataset.height;

      var contentElement = this._returnScopeChild(parentElement.querySelectorAll('[data-tabs="content"]'), parentElement);

      var tabElements = this._returnScopeList(parentElement.querySelectorAll('[data-tabs="element"]'), parentElement);

      if (!transition) {
        parentElement.classList.add('no-transition');
      }

      if (dataHeight === 'max') {
        contentElement.style.height = "".concat(this._returnMaxHeight(tabElements), "px");
      } else {
        contentElement.style.height = "".concat(this._returnScopeChild(parentElement.querySelectorAll('[data-tabs="element"].is-active'), parentElement).offsetHeight, "px");
      }

      setTimeout(function () {
        return parentElement.classList.remove('no-transition');
      });
    }
  }, {
    key: "_initTab",
    value: function _initTab(tab) {
      var _this4 = this;

      var dataHeight = tab.dataset.height;
      var dataDelay = tab.dataset.delay ? tab.dataset.delay : 0;
      var tabContentElement = tab.querySelector('[data-tabs="content"]');

      var tabControlElements = this._returnScopeList(tab.querySelectorAll('[data-tabs="control"]'), tab);

      var tabElements = this._returnScopeList(tab.querySelectorAll('[data-tabs="element"]'), tab);

      this._setTabStartState(tab, dataHeight, tabElements, tabContentElement, tabControlElements, dataDelay);

      tabElements.forEach(function (element) {
        _this4._resizeObserver().observe(element);
      });
      setTimeout(function () {
        tab.classList.remove('no-transition-global');
      });
    }
  }, {
    key: "reInit",
    value: function reInit() {
      this._initAllTabs();
    }
  }, {
    key: "openTab",
    value: function openTab(control) {
      var currentIndex = control.dataset.index;
      var parentElement = control.closest('[data-tabs="parent"]');

      if (control.classList.contains('is-active') || parentElement.classList.contains('no-action')) {
        return;
      }

      var dataDelay = parentElement.dataset.delay ? parentElement.dataset.delay : 0;
      var dataHeight = parentElement.dataset.height;
      var contentElement = parentElement.querySelector('[data-tabs="content"]');

      var tabElements = this._returnScopeList(parentElement.querySelectorAll('[data-tabs="element"]'), parentElement);

      var activeControl = this._returnScopeChild(parentElement.querySelectorAll('[data-tabs="control"].is-active'), parentElement);

      var activeElement = this._returnScopeChild(parentElement.querySelectorAll('[data-tabs="element"].is-active'), parentElement);

      var currentHeight = contentElement.offsetHeight;
      var newHeight = tabElements[currentIndex].offsetHeight;
      parentElement.classList.add('no-action');
      document.activeElement.blur();

      if (activeControl) {
        activeControl.classList.remove('is-active');
      }

      if (activeElement) {
        activeElement.classList.remove('is-active');
      }

      if (currentHeight > newHeight) {
        setTimeout(function () {
          if (dataHeight !== 'max') {
            contentElement.style.height = newHeight + 'px';
          }

          control.classList.add('is-active');
          tabElements[currentIndex].classList.add('is-active');
          parentElement.classList.remove('no-action');
        }, dataDelay);
      } else {
        if (dataHeight !== 'max') {
          contentElement.style.height = newHeight + 'px';
        }

        setTimeout(function () {
          control.classList.add('is-active');
          tabElements[currentIndex].classList.add('is-active');
          parentElement.classList.remove('no-action');
        }, dataDelay);
      }

      if (this.callback) {
        setInterval(this.callback, 200);
      }
    }
  }]);

  return Tabs;
}();

/***/ }),

/***/ "./js/utils/ios-checker.js":
/*!*********************************!*\
  !*** ./js/utils/ios-checker.js ***!
  \*********************************/
/*! exports provided: iosChecker */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "iosChecker", function() { return iosChecker; });
var iosChecker = function iosChecker() {
  return ['iPad Simulator', 'iPhone Simulator', 'iPod Simulator', 'iPad', 'iPhone', 'iPod'].includes(navigator.platform) // iPad on iOS 13 detection
  || navigator.userAgent.includes('Mac') && 'ontouchend' in document;
};

/***/ }),

/***/ "./js/utils/ios-vh-fix.js":
/*!********************************!*\
  !*** ./js/utils/ios-vh-fix.js ***!
  \********************************/
/*! exports provided: iosVhFix */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "iosVhFix", function() { return iosVhFix; });
/* harmony import */ var _ios_checker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ios-checker */ "./js/utils/ios-checker.js");


var iosVhFix = function iosVhFix() {
  if (!(!!window.MSInputMethodContext && !!document.documentMode)) {
    if (Object(_ios_checker__WEBPACK_IMPORTED_MODULE_0__["iosChecker"])()) {
      var vh = window.innerHeight * 0.01;
      document.documentElement.style.setProperty('--vh', "".concat(vh, "px"));
      window.addEventListener('resize', function () {
        vh = window.innerHeight * 0.01;
        document.documentElement.style.setProperty('--vh', "".concat(vh, "px"));
      });
    }
  }
};



/***/ })

/******/ });
//# sourceMappingURL=main.min.js.map